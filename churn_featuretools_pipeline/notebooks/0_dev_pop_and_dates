{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "married-brain",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T12:43:41.461600Z",
     "start_time": "2021-05-19T12:43:36.147787Z"
    }
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from datetime import date, datetime, timedelta\n",
    "\n",
    "import bcag\n",
    "from bcag.sql_utils import execute_sql_query\n",
    "\n",
    "import sys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "continuing-intent",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T13:34:50.816670Z",
     "start_time": "2021-05-19T13:34:50.807684Z"
    }
   },
   "outputs": [],
   "source": [
    "from functools import partial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adjacent-seventh",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T12:43:43.814346Z",
     "start_time": "2021-05-19T12:43:41.464628Z"
    }
   },
   "outputs": [],
   "source": [
    "sys.path.append(\"..\")\n",
    "from churn21.data import dates as utils_dt, load as utils_load"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "headed-bosnia",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T12:43:44.090480Z",
     "start_time": "2021-05-19T12:43:43.816617Z"
    }
   },
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 1\n",
    "%aimport churn21.data.dates, churn21.data.load"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "alive-founder",
   "metadata": {},
   "source": [
    "# Date Considerations\n",
    "- required dates\n",
    "    - cut-off date\n",
    "    - first considered date for observation period\n",
    "    - last considered date for label period\n",
    "    \n",
    "- lookback period: 13 months; this allows us to\n",
    "    - compute trx-based features for months -13 (p1), -12 to -2 (p2), and -1 (p3)\n",
    "    - comparison of months -13 to -1 to analyze a trend for the previous month and the same month a year ago (used in corn√®r model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "imported-event",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T16:11:34.878979Z",
     "start_time": "2021-05-19T16:11:34.847984Z"
    }
   },
   "outputs": [],
   "source": [
    "dt_params = dict({\n",
    "    \"last_cut_off_date_train\": date(2020, 10, 31),\n",
    "    \"first_cut_off_date_train\": date(2020, 7, 31),\n",
    "    \"lookback_period_months\": 13,\n",
    "    \"label_period_months\": 3,\n",
    "    \"n_months_considered_training\": 6\n",
    "})\n",
    "l_dates_train, l_dates_test = utils_dt.create_dateinfo(dt_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "signed-creator",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T16:11:35.543230Z",
     "start_time": "2021-05-19T16:11:35.532228Z"
    }
   },
   "outputs": [],
   "source": [
    "l_dates_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "changed-albert",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T16:11:36.063409Z",
     "start_time": "2021-05-19T16:11:36.054402Z"
    }
   },
   "outputs": [],
   "source": [
    "l_dates_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "lined-proceeding",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T12:43:44.152484Z",
     "start_time": "2021-05-19T12:43:44.142479Z"
    }
   },
   "outputs": [],
   "source": [
    "dt_params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "coastal-escape",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T12:43:44.196484Z",
     "start_time": "2021-05-19T12:43:44.155484Z"
    }
   },
   "outputs": [],
   "source": [
    "engine = bcag.connect(\"jemas\", \"prod\", \"jemas_temp\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "common-finding",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-17T09:34:22.410464Z",
     "start_time": "2021-05-17T09:28:26.419503Z"
    }
   },
   "outputs": [],
   "source": [
    "# takes about 5 mins and 12 secs to run through\n",
    "utils_load.run_sql_scripts(engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "transparent-supplement",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T12:43:45.707769Z",
     "start_time": "2021-05-19T12:43:44.198483Z"
    }
   },
   "outputs": [],
   "source": [
    "df_population = utils_load.load_population(engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "distinct-accessory",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T14:48:06.291104Z",
     "start_time": "2021-05-19T14:48:05.940373Z"
    }
   },
   "outputs": [],
   "source": [
    "df_population = utils_load.filter_population(\n",
    "    df_population, l_dates_test[\"dt_cut_off\"]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cardiac-polish",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T14:55:57.940409Z",
     "start_time": "2021-05-19T14:55:57.793426Z"
    },
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "df_label = utils_load.load_label(engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "collectible-making",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T14:59:33.491041Z",
     "start_time": "2021-05-19T14:59:33.435041Z"
    }
   },
   "outputs": [],
   "source": [
    "df_label = utils_load.filter_label(\n",
    "    df_label, l_dates_test[\"dt_cut_off\"], \n",
    "    l_dates_test[\"dt_label_last_considered\"]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "tracked-conclusion",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T13:34:16.377048Z",
     "start_time": "2021-05-19T13:33:20.432416Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df_fakturadaten = utils_load.load_jamo_based_info(\n",
    "    engine, \"churn21_fakturadaten\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "contrary-magic",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T13:14:31.544304Z",
     "start_time": "2021-05-19T13:14:25.029380Z"
    }
   },
   "outputs": [],
   "source": [
    "df_gi = utils_load.load_jamo_based_info(\n",
    "    engine, \"churn21_general_information\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cognitive-decision",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T13:17:19.230688Z",
     "start_time": "2021-05-19T13:16:58.890384Z"
    }
   },
   "outputs": [],
   "source": [
    "df_segments = utils_load.load_jamo_based_info(\n",
    "    engine, \"churn21_segments\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "revolutionary-update",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T15:06:52.002381Z",
     "start_time": "2021-05-19T15:06:51.926379Z"
    }
   },
   "outputs": [],
   "source": [
    "l_jamo_based = [df_gi, df_fakturadaten, df_segments]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "monetary-following",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T15:07:05.304107Z",
     "start_time": "2021-05-19T15:06:58.852239Z"
    }
   },
   "outputs": [],
   "source": [
    "most_recent_partial = partial(\n",
    "        utils_load._most_recent_information, cut_off_date=l_dates_test[\"dt_cut_off\"]\n",
    ")\n",
    "iterable = map(most_recent_partial, l_jamo_based)\n",
    "l_out = list(iterable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "antique-arabic",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T15:07:48.331636Z",
     "start_time": "2021-05-19T15:07:39.986894Z"
    }
   },
   "outputs": [],
   "source": [
    "df_annual_fee_date = utils_load.load_annual_fee_date(engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "consistent-trinity",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T15:33:09.745736Z",
     "start_time": "2021-05-19T15:33:09.576383Z"
    }
   },
   "outputs": [],
   "source": [
    "df_annual_fee_date = utils_load.next_annual_fee_date(\n",
    "    df_annual_fee_date, l_dates_test[\"dt_cut_off\"]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "mechanical-drain",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T15:47:08.379977Z",
     "start_time": "2021-05-19T15:46:56.895297Z"
    }
   },
   "outputs": [],
   "source": [
    "df_annual_fee_history = utils_load.load_annual_fee_history(engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "electric-darkness",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T15:47:09.250333Z",
     "start_time": "2021-05-19T15:47:09.001374Z"
    }
   },
   "outputs": [],
   "source": [
    "df_annual_fee_history = utils_load.aggregate_af_history(\n",
    "    df_annual_fee_history,\n",
    "    l_dates_test[\"dt_cut_off\"]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "expensive-hydrogen",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-19T16:20:58.697310Z",
     "start_time": "2021-05-19T16:19:14.210550Z"
    },
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "l_train_test = utils_load.create_dataset(\n",
    "    l_dates_train,\n",
    "    l_dates_test,\n",
    "    update_sql_scripts=False,\n",
    "    engine=engine\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "round-disclosure",
   "metadata": {},
   "source": [
    "*TODOs*\n",
    "- load_snapshot_data\n",
    "    - load_annual_fee_deadline, load_annual_fee_paid still have to be written\n",
    "    - merge all snapshot data\n",
    "    - check that no nas in this dataframe\n",
    "- security checks using bulwark\n",
    "- add trx-based features using featuretools\n",
    "- once pipeline is ready for one cut-off date\n",
    "    - iterate over different training date combinations\n",
    "    - combine the data from all different training cut-off dates\n",
    "- fakturadaten (currently an .sql script) could be re-written as a stored procedure such that only last jamo per konto_lauf_is is written into a table. this would reduce the time to load fakturadaten into python (currently ~40 secs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adjustable-shadow",
   "metadata": {},
   "source": [
    "# Backup for Module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "alpha-relay",
   "metadata": {},
   "outputs": [],
   "source": [
    "    df_fakturadaten[\"letzter_tag\"] = pd.to_datetime(\n",
    "        df_fakturadaten[\"letzter_tag\"]\n",
    "    )\n",
    "    # select last available jamo from fakturadaten\n",
    "    df_fakturadaten = _most_recent_information(df_fakturadaten)\n",
    "    df_fakturadaten = pop.merge(df_fakturadaten, how=\"left\", on=\"konto_lauf_id\")\n",
    "    # add feature with n_months_since_last fakturadaten\n",
    "    df_fakturadaten[\"time_since_last_faktura\"] = (\n",
    "        pd.to_datetime(cut_off_date) - df_fakturadaten[\"letzter_tag\"]\n",
    "    )\n",
    "    # handle nas\n",
    "    col_nulls = [\n",
    "        \"is_revolver\", \"ausstehend\", \"sind_zinsen_geschenkt\",\n",
    "        \"ist_mahngebuehr_erlassen\", \"revolve_cum\"\n",
    "    ]\n",
    "    df_fakturadaten[col_nulls] = df_fakturadaten[col_nulls].fillna(0)\n",
    "    # accounts not having received any faktura yet\n",
    "    df_fakturadaten[\"time_since_last_faktura\"].fillna(\n",
    "        pd.Timedelta(days=-31), inplace=True\n",
    "    )\n",
    "    df_fakturadaten[\"time_since_last_faktura\"] = df_fakturadaten[\n",
    "        \"time_since_last_faktura\"].dt.days.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "resident-laundry",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
